# Microbit Basic Projects

## Project 1：Heart Beat

1. Description

The sensor modules and LED dot matrix of the Microbit basic projec omes with the micro: bit mainboard.

Prepare a Micro:bit board and a USB cable. Next we will conduct a basi xperiment that a heartbeat pattern flashes on the micro:bit board.

2. Components Needed

<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>

![](media/35c29c989e9d8c6c45aeb31a493efdb1.png)

</td>
<td>

![](media/81bfee2741c94f7e5cb7f8ec66b83945.jpg)

</td>
<td></td>
</tr>
<tr class="even">
<td>Micro:bit * 1</td>
<td>USB Cable * 1</td>
<td></td>
</tr>
</tbody>
</table>

3. Test Code

You can upload the code directly from the tutorial (read th Development Environment Configuration" file if in doubt).

Code:

```python
from microbit import *

while True:
    display.show(Image.HEART)
    sleep(500)
    display.show(Image.HEART_SMALL)
    sleep(500)

```


4. Code Explanation

<table>
<colgroup>
<col style="width: 48%" />
<col style="width: 51%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong><mark>from</mark></strong> microbit <strong>import</strong>
*</td>
<td>Import the library file of micro：bit</td>
</tr>
<tr class="even">
<td><strong>while True:</strong></td>
<td>This is a permanent loop that make the micro: bit execute the cod n the loop forever.</td>
</tr>
<tr class="odd">
<td>display.show(Image.HEART)</td>
<td>LED dot matrix displays“![](media/4c1d17c44cea92678239fbb2553224af.png)”</td>
</tr>
<tr class="even">
<td>sleep(500)</td>
<td>Delay in 500ms</td>
</tr>
<tr class="odd">
<td>display.show(Image.HEART_SMALL)</td>
<td>LED dot matrix displays“![](media/0ded2b7cc7044bda03f2e209f2635e01.png)”</td>
</tr>
</tbody>
</table>

5. Test Result

Upload the code to the micro:bit and plug in it via a USB cable, the he LED dot matri isplays![](media/4c1d17c44cea92678239fbb2553224af.png)
and ![](media/0ded2b7cc7044bda03f2e209f2635e01.png).

If download unsuccessfully, disconnect the micro:bit and reboot it

![](media/172827cdf8056b4ecc7692467ca5a751.png)![](media/5a5c8c2e3e1adb106905863f7da68f78.png)

6. Expanded Knowledge

You can see that "Image.HEART" is equa o![](media/4c1d17c44cea92678239fbb2553224af.png);
"Image.HEART_SMALL" is equal to
![](media/0ded2b7cc7044bda03f2e209f2635e01.png) his is actually written in microbit, you can directly use it.

The following is a list of built-in images. If you are interested, yo an replace "Image.HEART" in the function show () with one of th ollowing images.

• Image.HEART

• Image.HEART_SMALL

• Image.HAPPY

• Image.SMILE

• Image.SAD

• Image.CONFUSED

• Image.ANGRY

• Image.ASLEEP

• Image.SURPRISED

• Image.SILLY

• Image.FABULOUS

• Image.MEH

• Image.YES

• Image.NO

• Image.CLOCK12, Image.CLOCK11, Image.CLOCK10, Image.CLOCK9 mage.CLOCK8, Image.CLOCK7, Image.CLOCK6, Image.CLOCK5,

Image.CLOCK4, Image.CLOCK3, Image.CLOCK2,Image.CLOCK1

• Image.ARROW_N, Image.ARROW_NE, Image.ARROW_E, Image.ARROW_SE mage.ARROW_S, Image.ARROW_SW, Image.ARROW_W, Image.ARROW_NW

• Image.TRIANGLE

• Image.TRIANGLE_LEFT

• Image.CHESSBOARD

• Image.DIAMOND

• Image.DIAMOND_SMALL

• Image.SQUARE

• Image.SQUARE_SMALL

• Image.RABBIT

• Image.COW

• Image.MUSIC_CROTCHET

• Image.MUSIC_QUAVER

• Image.MUSIC_QUAVERS

• Image.PITCHFORK

• Image.PACMAN

• Image.TARGET

• Image.TSHIRT

• Image.ROLLERSKATE

• Image.DUCK

• Image.HOUSE

• Image.TORTOISE

• Image.BUTTERFLY

• Image.STICKFIGURE

• Image.GHOST

• Image.SWORD

• Image.GIRAFFE

• Image.SKULL

• Image.UMBRELLA

• Image.SNAKE，Image.ALL_CLOCKS，Image.ALL_ARROWS





## Project 2: Light Up A Single LED：

1. Description

Micro:bit motherboard consists of 25 light-emitting diodes, 5 pcs in  roup, which correspond to x and y axis, forging a 5\*5 matrix oreover, every diode locates at the point of x and y axis.

Virtually, we could control an LED by setting coordinate points. Fo nstance, set coordinate point（0，0）to turn on the LED at row 1 an olumn 1; light up LED at the row 1 and column 3, we could set （2，0 nd so on.

![](media/f0d35e762cac7831828fb888805acd40.png)

2. Components Needed

<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>

![](media/35c29c989e9d8c6c45aeb31a493efdb1.png)

</td>
<td>

![](media/81bfee2741c94f7e5cb7f8ec66b83945.jpg)

</td>
<td></td>
</tr>
<tr class="even">
<td>Micro:bit * 1</td>
<td>USB Cable * 1</td>
<td></td>
</tr>
</tbody>
</table>

3. Test Code

You can upload the code directly from the tutorial (read th Development Environment Configuration" file if in doubt).

Code:

```python
from microbit import *

val1 = Image("09000:""00000:""00000:""00000:""00000:")
val2 = Image("00000:""00000:""00000:""00000:""00090:")
val3 = Image("00000:""00000:""00000:""00000:""00000:")

while True:
    display.show(val1)
    sleep(500)
    display.show(val3)
    sleep(500)
    display.show(val2)
    sleep(500)
    display.show(val3)
    sleep(500)

```

4. Code Explanation

<table>
<colgroup>
<col style="width: 48%" />
<col style="width: 51%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>from</strong> microbit <strong>import</strong> *</td>
<td>Import the library file of micro：bit</td>
</tr>
<tr class="even">
<td><p>val1 = Image("09000:""00000:""00000:""00000:""00000:")</p>
<p>val2 = Image("00000:""00000:""00000:""00000:""00090:")</p>
<p>val3 = Image("00000:""00000:""00000:""00000:""00000:")</p></td>
<td><p>Set Image() to val1</p>
<p>Set pixel of LED on micro:bit to the value in 0~9</p>
<p>Pixel of each LED on micro:bit can be set in one of ten values</p>
<p>If set pixel to 0 (zero) ，which means in close state, literally,  s brightness, 9 is best brightness</p>
<p>Set Image() to val2</p>
<p>Set Image() to val3</p></td>
</tr>
<tr class="odd">
<td><strong>while True:</strong></td>
<td>This is a permanent loop that makes micro:bit execute the code o t.</td>
</tr>
<tr class="even">
<td><p>display.show(val1)</p>
<p>sleep(500)</p>
<p>display.show(val3)</p>
<p>sleep(500)</p></td>
<td>LED at (1,0) blinks for 0.5s</td>
</tr>
<tr class="odd">
<td><p>display.show(val2)</p>
<p>sleep(500)</p>
<p>display.show(val3)</p>
<p>sleep(500)</p></td>
<td>LED at (3,4) flashes for 0.5s</td>
</tr>
</tbody>
</table>

5. Test Result

After downloading code, plug in power with a USB cable, you will see th ED at(1,0) flashes for 0.5s then the LED at (3,4) blinks for 0.5s, i oop way.

![](media/02bc184f70538ce97db32d52f89080ac.png)![](media/d81896e508324f8daf32dbdfe1de20b6.png)





## Project 3: 5 x 5 LED Dot Matrix

1. Description

Dot matrix gains popularity in our life, such as LED screen, bus statio nd the mini TV in the lift.

The dot matrix of Micro:bit board consists of 25 light emitting diodes n previous lesson, we control LED of Micro:bit board to form patterns umbers and character strings by setting the coordinate points oreover, we could adopt another way to complete the display o atterns, numbers and character strings.

2. Components Needed

<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>

![](media/35c29c989e9d8c6c45aeb31a493efdb1.png)

</td>
<td>

![](media/81bfee2741c94f7e5cb7f8ec66b83945.jpg)

</td>
<td></td>
</tr>
<tr class="even">
<td>Micro:bit * 1</td>
<td>USB Cable * 1</td>
<td></td>
</tr>
</tbody>
</table>

Test Code

```python
from microbit import *

val = Image("00900:""00900:""90909:""09990:""00900")

display.show(val)

```

Code 2：

```pyhon
from microbit import *
val = Image("00900:""00900:""90909:""09990:""00900")
display.show('1')
sleep(500)
display.show('2')
sleep(500)
display.show('3')
sleep(500)
display.show('4')
sleep(500)
display.show('5')
sleep(500)
display.show(val)
sleep(500)
display.scroll("hello!")
sleep(200)
display.show(Image.HEART)
sleep(500)
display.show(Image.ARROW_NE)
sleep(500)
display.show(Image.ARROW_SE)
sleep(500)
display.show(Image.ARROW_SW)
sleep(500)
display.show(Image.ARROW_NW)
sleep(500)
display.clear()
```


4. Code Explanation

<table>
<colgroup>
<col style="width: 51%" />
<col style="width: 48%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>from</strong> microbit <strong>import</strong> *</td>
<td>import the library file of micro:bit</td>
</tr>
<tr class="even">
<td>val = Image("09000:""00000:""00000:""00000:""00000:")</td>
<td>Set Image() to variable val</td>
</tr>
<tr class="odd">
<td>display.show(val)</td>
<td>micro:bit shows“→”</td>
</tr>
<tr class="even">
<td>display.show('1')</td>
<td>micro:bit shows“1”</td>
</tr>
<tr class="odd">
<td>sleep(500)</td>
<td>Delay in 500ms</td>
</tr>
<tr class="even">
<td>display.scroll("hello!")</td>
<td>micro:bit scrolls to show“hello!”</td>
</tr>
<tr class="odd">
<td>display.show(Image.HEART)</td>
<td>micro:bit displays“❤”</td>
</tr>
<tr class="even">
<td><p>display.show(Image.ARROW_NE) display.show(Image.ARROW_SE isplay.show(Image.ARROW_SW)</p>
<p>display.show(Image.ARROW_NW)</p></td>
<td><p>micro:bit shows“Northeast”arrow</p>
<p>micro:bit displays“Southeast”arrow</p>
<p>micro:bit shows“Southwest”arrow</p>
<p>micro:bit displays“Northwest”arrow</p></td>
</tr>
<tr class="odd">
<td>display.clear()</td>
<td>The LED dot matrix of micro:bit clears</td>
</tr>
</tbody>
</table>

5. Test Result

Download code 2 to micro:bit, then the LED dot matrix wil isplay“1”,“2”,“3”,“4”,“5”,“↓”,“hello!”,“❤”,
![](media/39fe4029acb5fb675d875c58e382d148.png),
![](media/45fcde65eb80a942d3903e400a346587.png),
![](media/9e34fdb19d72918bde242994a3c94c1f.png) and
![](media/2a45fca9d836ce38674c347c70c81e02.png)patterns ach interval is 500ms.





## Project 4: Programmable Buttons

1. Description

The button can control the on and off of the circuit, which is attache o the circuit. The circuit is disconnected when the button is no ressed. The circuit is connected as soon as it is pressed, but it i isconnected after being released.

Both ends of button are like two mountains. There is a river in between.

The internal metal piece connect the two sides to let the current pass ust like building a bridge to connect the two mountains.

![](media/2ff75a1d81bfe0228b83931a0b7cc860.png)
![](media/d2a204e61c768f18924150db58aee093.png)

-   （Internal Structure）

Working Principle：Before pressing the button, 1, 2 , 3 and 4 ar witched on, but 1, 3 or 1, 4 or 2, 3 or 2, 4 is disconnected (blocked) hich will be on when the button is pressed.

Micro:bit board has three buttons, the reset button is on the back an wo programmable buttons are on the front. Press A, B and AB at the sam ime respectively, and the corresponding screen displays the espectively.

2. Components Needed

<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>

![](media/35c29c989e9d8c6c45aeb31a493efdb1.png)

</td>
<td>

![](media/81bfee2741c94f7e5cb7f8ec66b83945.jpg)

</td>
<td></td>
</tr>
<tr class="even">
<td>Micro:bit * 1</td>
<td>USB Cable * 1</td>
<td></td>
</tr>
</tbody>
</table>

3. Test Code

You can upload the code directly from the tutorial (read th Development Environment Configuration" file if in doubt).

Code1:

```python
from microbit import *

while True:
    if button_a.is_pressed():
        display.show("A")
    elif button_a.is_pressed() and button_b.is_pressed():
        display.scroll("AB")
    elif button_b.is_pressed():
        display.show("B")
```



Test Result**：**Upload code 1 and plug in micro:bit via USB cable ress“A”on Micro:bit board, character“A”will be displayed；in case tha  is pressed，letter“B”will appear. “AB”will be displayed if you press  nd B buttons simultaneously.

Code2:

```python
from microbit import *
a = 0
b = 0
val1 = Image("00000:""00000:""00000:""00000:""00900")
val2 = Image("00000:""00000:""00000:""00900:""99999")
val3 = Image("00000:""00000:""00900:""99999:""99999")
val4 = Image("00000:""00900:""99999:""99999:""99999")
val5 = Image("00900:""99999:""99999:""99999:""99999")
val6 = Image("99999:""99999:""99999:""99999:""99999")
display.show(val1)

while True:
    while button_a.is_pressed() == True:
        sleep(10)
        if button_a.is_pressed() == False:
            a = a + 1
            if(a >= 5):
                a = 5
            break
    while button_b.is_pressed() == True:
        sleep(10)
        if button_b.is_pressed() == False:
            a = a - 1
            if(a <= 0):
                a = 0
            break
    if a == 0:
        display.show(val1)
    if a == 1:
        display.show(val2)
    if a == 2:
        display.show(val3)
    if a == 3:
        display.show(val4)
    if a == 4:
        display.show(val5)
    if a == 5:
        display.show(val6)
```





Test Result**：**Upload code 2 and plug in board via USB cable. Pres utton A, the number of rows lit by the LED dot matrix will increase hen B is pressed, the number of rows lit by the LED dot matrix wil ecrease.

4. Code Explanation

<table>
<colgroup>
<col style="width: 51%" />
<col style="width: 48%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>from</strong> microbit <strong>import</strong> *</td>
<td>Import the library file of micro:bit</td>
</tr>
<tr class="even">
<td><strong>while True:</strong></td>
<td>This is a permanent loop that makes micro:bit execute the code o t.</td>
</tr>
<tr class="odd">
<td><p><strong>if</strong> button_a.is_pressed():</p>
<p>display.show("A")</p>
<p><strong>elif</strong> button_a.is_pressed() <strong>and</strong>
button_b.is_pressed(): display.scroll("AB")</p>
<p><strong>elif</strong> button_b.is_pressed():</p>
<p>display.show("B")</p></td>
<td><p>If button A is pressed</p>
<p>micro:bit shows“A”</p>
<p>If button A and B are pressed at same time</p>
<p>micro:bit displays“AB”</p>
<p>If button B is pressed</p>
<p>micro:bit shows“B”</p></td>
</tr>
<tr class="even">
<td><p><strong>while</strong> button_a.is_pressed() ==
<strong>True</strong>:</p>
<p>sleep(10)</p>
<p><strong>if</strong> button_a.is_pressed() ==
<strong>False</strong>:</p>
<p>a = a + 1</p>
<p><strong>if</strong>(a &gt;= 5):</p>
<p>a = 5</p>
<p>break</p>
<p><strong>while</strong> button_b.is_pressed() ==
<strong>True</strong>:</p>
<p>sleep(10)</p>
<p><strong>if</strong> button_b.is_pressed() ==
<strong>False</strong>:</p>
<p>a = a - 1</p>
<p><strong>if</strong>(a &lt;= 0):</p>
<p>a = 0</p>
<p>break</p>
<p><strong>if</strong> a == 0:</p>
<p>display.show(val1)</p>
<p><strong>if</strong> a == 1:</p>
<p>display.show(val2)</p>
<p><strong>if</strong> a == 2:</p>
<p>display.show(val3)</p>
<p><strong>if</strong> a == 3:</p>
<p>display.show(val4)</p>
<p><strong>if</strong> a == 4:</p>
<p>display.show(val5)</p>
<p><strong>if</strong> a == 5:</p>
<p>display.show(val6)</p></td>
<td><p>When the button A is pressed</p>
<p>Delay in 10ms to eliminate the shaking of button A</p>
<p>when button A is released,</p>
<p>Variable a adds 1</p>
<p>If variable a≥5</p>
<p>Variable a=5</p>
<p>exit the loop</p>
<p>when button B is pressed</p>
<p>Delay in 10ms to eliminate the shaking of button B</p>
<p>When the button B is released</p>
<p>Variable a reduces 1 gradually</p>
<p>When a≤0</p>
<p>Variable a=0</p>
<p>exit the loop</p>
<p>When a=0</p>
<p>micro:bit shows pattern val1</p>
<p>When a=1</p>
<p>micro:bit displays pattern val2</p>
<p>When a=2</p>
<p>micro:bit shows pattern val3</p>
<p>If a=3</p>
<p>micro:bit displays pattern val4</p>
<p>If a=4</p>
<p>micro:bit shows pattern val5</p>
<p>If a=5</p>
<p>micro:bit displays pattern val6</p></td>
</tr>
</tbody>
</table>





## Project 5: Temperature Measurement

1. Description

Micro:bit main board doesn’t come with temperature sensor actually, bu etect temperature through built-in temperature of NFR51822 chip hereby, the detected temperature is more close to chip’s temperature.

In this project, we will use the sensor to test the temperature in th urrent environment, and display the test results in the display dat equipment), then set the temperature range detected by the sensor in  ay that controls the LED dot matrix to display different patterns.

![](media/206c8ec1c3f11d2de8d0f42fdf5b6b47.png)

（Temperature Sensor**）**

2. Components Needed

<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>

![](media/35c29c989e9d8c6c45aeb31a493efdb1.png)

</td>
<td>

![](media/81bfee2741c94f7e5cb7f8ec66b83945.jpg)

</td>
<td></td>
</tr>
<tr class="even">
<td>Micro:bit * 1</td>
<td>USB Cable * 1</td>
<td></td>
</tr>
</tbody>
</table>

3. Test Code

You can upload the code directly from the tutorial (read th Development Environment Configuration" file if in doubt).

Code1:

```python
from microbit import *
while True:
    Temperature = temperature()
    print("Temperature:", Temperature, "C")
    sleep(500)
```


Test Result**：**After downloading test code 1 to micro:bit board, kee SB connected and click**“REPL”and press the reset button o icro:bit.** Then REPL window will show the ambient temperature value s shown below:(C stands for temperature unit)

![](media/db5c433810c37c8d9f75a62ff99eb1e5.png)

Code2:

```python
from microbit import *
while True:
    if temperature() >= 35:
        display.show(Image.HEART)
    else:
        display.show(Image.HEART_SMALL)
```


Test Result**：**Upload the code 2 plug in micro:bit via USB cable, whe he ambient temperature is less than 35℃, 5\*5LED wil how![](media/4b1765e12b413dc5d562f2a16d32392f.png) hen the temperature is equivalent to or greater than 35℃, th attern![](media/f2705fbc4886efcfaac96589ca255f66.png)
will appear.

4. Code Explanation

<table>
<colgroup>
<col style="width: 52%" />
<col style="width: 47%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>from</strong> microbit <strong>import</strong> *</td>
<td>Import the library file of micro:bit</td>
</tr>
<tr class="even">
<td><strong>while True:</strong></td>
<td>This is a permanent loop that makes micro:bit execute the code o t.</td>
</tr>
<tr class="odd">
<td>Temperature = temperature()</td>
<td>Set temperature() to Temperature</td>
</tr>
<tr class="even">
<td>print("Temperature:", Temperature, "C")</td>
<td>BBC micro:bit REPL prints temperature value</td>
</tr>
<tr class="odd">
<td>sleep(500)</td>
<td>Delay in 500ms</td>
</tr>
<tr class="even">
<td><p><strong>if</strong> temperature() &gt;= 35:
display.show(Image.HEART)</p>
<p><strong>else</strong>:</p>
<p>display.show(Image.HEART_SMALL)</p></td>
<td><p>If temperature value ≥35℃</p>
<p>micro:bit shows“![](media/f2705fbc4886efcfaac96589ca255f66.png)”</p>
<p>If temperature value&lt;35℃</p>
<p>micro:bit displays“![](media/4b1765e12b413dc5d562f2a16d32392f.png)”</p></td>
</tr>
</tbody>
</table>





## Project 6: Compass

1. Description

This project mainly introduces the use of the Micro:bit’s compass. I an be used to determine the direction. We need to calibrate th icro:bit board when magnetic sensor works. The correct calibratio ethod is to rotate the Micro:bit board.

In addition, the objects nearby may affect the accuracy of readings an alibration.

![](media/68b3f54592553e620f6d39f30f90feb9.png)

(Compass)

2. Components Needed

<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>

![](media/35c29c989e9d8c6c45aeb31a493efdb1.png)

</td>
<td>

![](media/81bfee2741c94f7e5cb7f8ec66b83945.jpg)

</td>
<td></td>
</tr>
<tr class="even">
<td>Micro:bit * 1</td>
<td>USB Cable * 1</td>
<td></td>
</tr>
</tbody>
</table>

3. Test Code

You can upload the code directly from the tutorial (read th Development Environment Configuration" file if in doubt).

Code1:

```python
from microbit import *
compass.calibrate()
while True:
    if button_a.is_pressed():
        display.scroll(compass.heading())
```


Code Explanation：We need to calibrate micro：bit due to differen agnetic field in different areas. Micro:bit will prompt you t alibrate when you use it first time.

Transfer code 1 to micro:bit, plug in micro:bit via USB cable and pres utton A. “TILT TO FILL SCREEN”appears on micro:bit. Then enter th alibration interface, the calibration method is to rotate the micro:bi oard and display a full square pattern(25 LEDs are on), as shown in th ollowing figure:

![](media/126a6b7d38badd37c323fd45ddd2862a.jpg)

The calibration is finished until you view the smil attern![](media/a4faf86fb027b2f4c3dacaeee5d47d2b.png).

The serial monitor will show 0°, 90°, 180°and 270° when pressing A.

Code2:

```python
from microbit import *
compass.calibrate()
x = 0
while True:
    x = compass.heading()
    if x >= 293 and x < 338:
        display.show(Image("00999:""00099:""00909:""09000:""90000"))
    elif x >= 23 and x < 68:
        display.show(Image("99900:""99000:""90900:""00090:""00009"))
    elif x >= 68 and x < 113:
        display.show(Image("00900:""09000:""99999:""09000:""00900"))
    elif x >= 113 and x < 158:
        display.show(Image("00009:""00090:""90900:""99000:""99900"))
    elif x >= 158 and x < 203:
        display.show(Image("00900:""00900:""90909:""09990:""00900"))
    elif x >= 203 and x < 248:
        display.show(Image("90000:""09000:""00909:""00099:""00999"))
    elif x >= 248 and x < 293:
        display.show(Image("00900:""00090:""99999:""00090:""00900"))
    else:
        display.show(Image("00900:""09990:""90909:""00900:""00900"))
```


Make micro: bit board point to the north, south, east and wes orizontally , LED dot matrix displays the corresponding directio atterns.

As shown below, the arrow pointing to the upper right when the valu anges from 292.5 to 337.5. 0.5 can’t be input in the code, thereby, th alues we get are 293 and 338

![](media/d1a4e9f62bdf690ba809ae35c347b233.png)

Upload code 2 onto micro:bit board and don’t plug off USB cable. Afte alibration, tilt Micro:bit board, the LED dot matrix displays th irection signs.

4. Code Explanation

<table>
<colgroup>
<col style="width: 48%" />
<col style="width: 51%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>from</strong> microbit <strong>import</strong> *</td>
<td>Import the library file of micro:bit</td>
</tr>
<tr class="even">
<td>compass.calibrate()</td>
<td>Compass calibration</td>
</tr>
<tr class="odd">
<td><strong>while True:</strong></td>
<td>This is a permanent loop, which makes micro:bit execute the code o t.</td>
</tr>
<tr class="even">
<td><p><strong>if</strong> button_a.is_pressed():</p>
<p>display.scroll(compass.heading())</p></td>
<td><p>When the button A is pressed</p>
<p>Micro:bit scrolls to show the value of compass</p></td>
</tr>
<tr class="odd">
<td>x = 0</td>
<td>Set variable x=0</td>
</tr>
<tr class="even">
<td>x = compass.heading()</td>
<td>Set the value of compass to variable x</td>
</tr>
<tr class="odd">
<td><strong>if</strong>...<strong>elif</strong>...<strong>else</strong></td>
<td>Set the value of compass to variable x</td>
</tr>
<tr class="even">
<td><p>display.show(Image("00999:""00099:""00909:""09000:""90000"))</p>
<p>display.show(Image("99900:""99000:""90900:""00090:""00009"))</p>
<p>display.show(Image("00900:""09000:""99999:""09000:""00900"))</p>
<p>display.show(Image("00009:""00090:""90900:""99000:""99900"))</p>
<p>display.show(Image("00900:""00900:""90909:""09990:""00900"))</p>
<p>display.show(Image("90000:""09000:""00909:""00099:""00999"))</p>
<p>display.show(Image("00900:""00090:""99999:""00090:""00900"))</p>
<p>display.show(Image("00900:""09990:""90909:""00900:""00900"))</p></td>
<td><p>Micro:bit shows the Northeast arrow sign</p>
<p>Micro:bit shows the Northwest arrow sign</p>
<p>Micro:bit shows the west arrow sign</p>
<p>Micro:bit shows the Southwest arrow sign</p>
<p>Micro:bit shows the Southeast arrow sign</p>
<p>Micro:bit shows the South arrow sign</p>
<p>Micro:bit shows the East arrow sign</p>
<p>Micro:bit shows the North arrow sign</p></td>
</tr>
</tbody>
</table>





## Project 7: Accelerometer

1. Description

The Micro:bit board has a built-in LSM303AGR acceleration senso accelerometer). It has a resolution of 8,10 and 12 bits, and th rogram sets the measuring range to 1g, 2g, 4g, and 8g.

We often use the accelerometer to detect the attitude of machines.

In this project, we will introduce the detection of several specia ostures by the accelerometer, then view the triaxial raw data output b he it.

2. Components Needed

<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>

![](media/35c29c989e9d8c6c45aeb31a493efdb1.png)

</td>
<td>

![](media/81bfee2741c94f7e5cb7f8ec66b83945.jpg)

</td>
<td></td>
</tr>
<tr class="even">
<td>Micro:bit * 1</td>
<td>USB Cable * 1</td>
<td></td>
</tr>
</tbody>
</table>

3. Test Code

You can upload the code directly from the tutorial (read th Development Environment Configuration" file if in doubt).

Code1:


```python
from microbit import *

while True:
    gesture = accelerometer.current_gesture()

    if gesture == "shake":
        display.show("1")
    if gesture == "up":
        display.show("2")
    if gesture == "down":
        display.show("3")
    if gesture == "face up":
        display.show("4")
    if gesture == "face down":
        display.show("5")
    if gesture == "left":
        display.show("6")
    if gesture == "right":
        display.show("7")
    if gesture == "freefall":
        display.show("8")
```






Test Result：Download code 1 to micro:bit board and plug in powe ith USB cable, then shake the Micro:bit board, the number 1 appears.

When the logo is up, the number 2 is displayed:

![](media/1600323e3e61e331c248cbeda5ccdcfc.jpg)

When the logo is down, the number 3 is displayed:

![](media/3be80acf957e53117f695801ce19c449.jpg)

When the screen is up, the number 4 is shown.

![](media/5797dd7be9a9c2d3226123e0c29db0bd.jpg)

On the contrary, the number 5 is displayed when the screen is down.

When Micro:bit board is tilt to the left, number 6 is shown.

![](media/326095934bcff0a925b4f9a09d6cf7d2.jpg)

When Micro:bit board is inclined to the right, number 7 is displayed.

![](media/185b0ac204e9b2c54dd8fa93d852568c.jpg)

When it is free fall, number 8 will appear on dot matrix.（Note：w on’t recommend you to make it free fall, it will cause board damage)

Code1:

```python
from microbit import *
while True:

    x = accelerometer.get_x()
    y = accelerometer.get_y()
    z = accelerometer.get_z()
    print("x, y, z:", x, y, z)
    sleep(100)
```




Test Result**：Download code 2 to micro:bit board and plug in powe ith USB cable, click**“REPL”and press the reset button on micro:bit.
Then REPL window will show the breakdown of the micro: bit acceleratio long the X, Y, and Z axes, as shown below:

![](media/6d30d1f183087e759b85403b0bddcbbd.png)

4. Code Explanation

<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>from</strong> microbit <strong>import</strong> *</td>
<td>Import the library file of micro:bit</td>
</tr>
<tr class="even">
<td>gesture = accelerometer.current_gesture()</td>
<td>Set accelerometer.current_gesture() to gesture</td>
</tr>
<tr class="odd">
<td><strong>while True:</strong></td>
<td>This is a permanent loop that makes micro:bit execute the code o t.</td>
</tr>
<tr class="even">
<td><p><strong>if</strong> gesture == "shake":</p>
<p>display.show("1")</p>
<p><strong>if</strong> gesture == "up":</p>
<p>display.show("2")</p>
<p><strong>if</strong> gesture == "down":</p>
<p>display.show("3")</p>
<p><strong>if</strong> gesture == "face up":</p>
<p>display.show("4")</p>
<p><strong>if</strong> gesture == "face down":</p>
<p>display.show("5")</p>
<p><strong>if</strong> gesture == "left":</p>
<p>display.show("6")</p>
<p><strong>if</strong> gesture == "right":</p>
<p>display.show("7")</p>
<p><strong>if</strong> gesture == "freefall":</p>
<p>display.show("8")</p></td>
<td><p>Shaking micro:bit board, number 1 will appear</p>
<p>When log points to the North, number 2 will show up.</p>
<p>When log points to the South, number 3 will be shown</p>
<p>When the LED dot matrix is upward, the number 4 is shown.</p>
<p>the number 5 is displayed when the LED dot matrix is downward.</p>
<p>When Micro:bit board is tilt to the left, number 6 is shown.</p>
<p>When micro:bit is tilt to the right</p>
<p>When Micro:bit board is inclined to the right, number 7 i isplayed.</p>
<p>When it is free fall(accidentally making it fall), number 8 appear n dot matrix.</p></td>
</tr>
<tr class="odd">
<td><p>x = accelerometer.get_x()</p>
<p>y = accelerometer.get_y()</p>
<p>z = accelerometer.get_z()</p></td>
<td><p>Read the acceleration value on x axis，the return value i nteger, and set x= the read value on x axis</p>
<p>Read the acceleration value on y axis，the return value is integer nd set y= the read value on y axis</p>
<p>Read the acceleration value on z axis，the return value is integer nd set z= the read value on z axis</p></td>
</tr>
<tr class="even">
<td>print("x, y, z:", x, y, z)</td>
<td>The value of acceleration will be shown</td>
</tr>
<tr class="odd">
<td>sleep(100)</td>
<td>Delay in 100ms</td>
</tr>
</tbody>
</table>





## Project 8: Detect Light Intensity

1. Description

This project will introduce how Micro:bit detects the external ligh ntensity. Since Micro:bit doesn’t come with a photosensitive sensor he detection of light intensity is completed through the LED matrix.

The LED matrix is used to sense the surrounding light and repeatedl onverts the LED into input and samples the voltage decay time. Th ight intensity detected is a relative value.

![](media/5bbafad58a34792768c8370e8ee8c2cf.png)

（Light Intensity Area）

2. Components Needed

<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>

![](media/35c29c989e9d8c6c45aeb31a493efdb1.png)

</td>
<td>

![](media/81bfee2741c94f7e5cb7f8ec66b83945.jpg)

</td>
<td></td>
</tr>
<tr class="even">
<td>Micro:bit * 1</td>
<td>USB Cable * 1</td>
<td></td>
</tr>
</tbody>
</table>

3. Test Code

You can upload the code directly from the tutorial (read th Development Environment Configuration" file if in doubt).

Code:

```python
from microbit import *

while True:
    Lightintensity = display.read_light_level()
    print("Light intensity:", Lightintensity)
    sleep(100)
```



4. Code Explanation

<table>
<colgroup>
<col style="width: 44%" />
<col style="width: 55%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>from</strong> microbit <strong>import</strong> *</td>
<td>Import the library file of micro:bit</td>
</tr>
<tr class="even">
<td>gesture = accelerometer.current_gesture()</td>
<td>Set accelerometer.current_gesture() to gesture</td>
</tr>
<tr class="odd">
<td><strong>while True:</strong></td>
<td>This is permanent loop, and micro bit executes the code</td>
</tr>
<tr class="even">
<td>Lightintensity = display.read_light_level()</td>
<td>Set display.read_light_level() to Lightintensity</td>
</tr>
<tr class="odd">
<td>print("Light intensity:", Lightintensity)</td>
<td>BBC microbit REPL prints the detected light intensity value</td>
</tr>
<tr class="even">
<td>sleep(100)</td>
<td>Delay in 100ms</td>
</tr>
</tbody>
</table>

5. Test Result

Download code onto micro:bit board, don’t plug off USB cable. Click
“REPL”and press the reset buttons, the light intensity value will b isplayed, as shown below.

Covering the LED dot matrix, the intensity value is 0; on the contrary he intensity value increases when placing micro:bit board under th un.

![](media/0ec112824972ca026fcad43dc61aa5bc.png)





## Project 9: Speaker

1. Description

The micro:bit motherboard has a built-in speaker, which makes it ver asy to add a sound to your project. The speaker can be programmed t mit a variety of tones, such as writing a song: Ode to Joy, and pla t.

![](media/ac515b9ae8891dc32f368a29f194a2fb.png)

（ Speaker
）

2. Components Needed

<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>

![](media/35c29c989e9d8c6c45aeb31a493efdb1.png)

</td>
<td>

![](media/81bfee2741c94f7e5cb7f8ec66b83945.jpg)

</td>
<td></td>
</tr>
<tr class="even">
<td>Micro:bit * 1</td>
<td>USB Cable * 1</td>
<td></td>
</tr>
</tbody>
</table>

3. Test Code

You can upload the code directly from the tutorial (read th Development Environment Configuration" file if in doubt).

Code:



```python
from microbit import *

import audio

display.show(Image.MUSIC_QUAVER)

while True:
    audio.play(Sound.GIGGLE)
    sleep(1000)
    audio.play(Sound.HAPPY)
    sleep(1000)
    audio.play(Sound.HELLO)
    sleep(1000)
    audio.play(Sound.YAWN)
    sleep(1000)
```



4. Code Explanation

<table>
<colgroup>
<col style="width: 54%" />
<col style="width: 45%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>from</strong> microbit <strong>import</strong> *</td>
<td>Import the library file of micro:bit</td>
</tr>
<tr class="even">
<td><strong>import</strong> audio</td>
<td>audio library file</td>
</tr>
<tr class="odd">
<td><strong>while True:</strong></td>
<td>This is permanent loop, and micro bit executes the code</td>
</tr>
<tr class="even">
<td>audio.play(Sound.GIGGLE)</td>
<td>Make a giggle sound</td>
</tr>
<tr class="odd">
<td>sleep(1000)</td>
<td>Delay in 1000ms</td>
</tr>
</tbody>
</table>

5. Test Result

Download code onto micro:bit board, don’t plug off USB cable, then th peaker will emit a sound and the LED dot matrix will display a musi ogo pattern.





## Project 10: Touch-sensitive Logo

1. Description

If you have a micro:bit mainboard, it makes sense to use a gol ouch-sensitive logo as another input in your project, which is like a xtra button. It uses a capacitive touch sensor that detects smal hanges in electric fields when you press (or touch) it with you inger. When you touch it, you can control the micro:bit board t erform certain functions.

![](media/644695850097c5ade080bb4848b4b481.png)

（Touch-sensitive Region）

2. Components Needed

<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>

![](media/35c29c989e9d8c6c45aeb31a493efdb1.png)

</td>
<td>

![](media/81bfee2741c94f7e5cb7f8ec66b83945.jpg)

</td>
<td></td>
</tr>
<tr class="even">
<td>Micro:bit * 1</td>
<td>USB Cable * 1</td>
<td></td>
</tr>
</tbody>
</table>

3. Test Code

You can upload the code directly from the tutorial (read th Development Environment Configuration" file if in doubt).

Code:


```python
from microbit import *
time = 0
start = 0
running = False

while True:

    if button_a.was_pressed():
        running = True
        start = running_time()
    if button_b.was_pressed():
        if running:
            time += running_time() - start
        running = False
    if pin_logo.is_touched():
        if not running:
            display.scroll(int(time/1000))

    if running:
        display.show(Image.HEART)
        sleep(300)
        display.show(Image.HEART_SMALL)
        sleep(300)
    else:
        display.show(Image.ASLEEP)
```





4. Code Explanation

（1）Micro:bit records the time in ms (thousands of minutes per second hen it is started. This is called the running time.

（2）When you press button A, a variable called start is set to th urrent running time.

（3）When you press button B, the start time will be subtracted from th ew running time to figure out how much time has passed since yo tarted the stopwatch. This difference is added to the total time, whic s stored in a variable called time.

（4）If you press the gold LOGO icon, the program displays the tota ime elapsed on the LED display. It converts time from ms (thousandth f a second) to seconds by dividing by 1000. It uses the intege ivision operator to give the result of an integer.

（5）The program also uses a Boolean variable named running to contro he program. Boolean variables only boast two values :true or false. I unning is true, the stopwatch is started. If running is false, th topwatch is not started or stopped.

（6）If running is true, the beating heart is displayed on the LED do creen.

（7）If the stopwatch has stopped, if "running" is false, it will onl how the time when you press the gold LOGO icon.

（8）If the stopwatch is already started, if "running" is true, the cod lso prevents false readings by ensuring that the time variable change nly when button B is pressed.

5. Test Result

Upload the code and plug in micro:bit via a USB cable. Press button A t tart the stopwatch. When the timer is timed, the LED dot matri isplays a beating heart, tap button B can stop it. It will keep addin ime, like a real stopwatch.

Press the gold LOGO logo on the front of the micro:bit can display th easured time in seconds. To reset the time to zero, press the Rese utton on the back of the micro:bit board.





## Project 11: Microphone

1. Description

The micro:bit motherboard boasts a built-in microphone, which can b sed to measure the ambient sound level. When you clap, the LE ndicator on the micro:bit motherboard will turn on. It can measure th ntensity of sound. In this connection, you can make a sound level char r disco lights that are in tune with the music.

![](media/3073a8af772ab91ecf264843b37d3b74.png)![](media/7f0741158e734ff8449d5b87d5ba85f4.png)

（Sound input hole of microphone）（Microphone）

2. Components Needed

<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>

![](media/35c29c989e9d8c6c45aeb31a493efdb1.png)

</td>
<td>

![](media/81bfee2741c94f7e5cb7f8ec66b83945.jpg)

</td>
<td></td>
</tr>
<tr class="even">
<td>Micro:bit * 1</td>
<td>USB Cable * 1</td>
<td></td>
</tr>
</tbody>
</table>

3. Test Code

You can upload the code directly from the tutorial (read th Development Environment Configuration" file if in doubt).

Code 1:



```python
from microbit import *

while True:
    if microphone.current_event() == SoundEvent.LOUD:
        display.show(Image.HEART)
        sleep(200)
    if microphone.current_event() == SoundEvent.QUIET:
        display.show(Image.HEART_SMALL)

```



Test Result: Download code 1 to micro:bit board and keep the US able connected, when applauding, the LED dot matrix displays the
❤ pattern. When the outside world is quiet, i ill display the
![](media/04fdfc9060943954e7938bb1a741d626.png)
pattern.

Code 2:



```python
from microbit import *
maxSound = 0
lights = Image("11111:"
              "11111:"
              "11111:"
              "11111:"
              "11111")
# ignore first sound level reading
soundLevel = microphone.sound_level()
sleep(200)

while True:
    if button_a.is_pressed():
        display.scroll(maxSound)
    else:
        soundLevel = microphone.sound_level()
        display.show(lights * soundLevel)
        if soundLevel > maxSound:
            maxSound = soundLevel
```





Test Result: Download code 2 to micro:bit board and keep the US able connected. When you press the A button on the micro:bi otherboard, the LED dot matrix displays the detected maximum soun evel value in the environment at this time (Note: reset the maximu alue by pressing the reset button on the back of the micro:bit). Whe pplauding, the louder the detected sound, the brighter the 25 LEDs.

4. Code Explanation

<table>
<colgroup>
<col style="width: 46%" />
<col style="width: 53%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>from</strong> microbit <strong>import</strong> *</td>
<td>Import the library file of micro:bit</td>
</tr>
<tr class="even">
<td><strong>while True:</strong></td>
<td>This is permanent loop, and micro bit executes the code</td>
</tr>
<tr class="odd">
<td><p><strong>if</strong> microphone.current_event() ==
SoundEvent.LOUD:</p>
<p>display.show(Image.HEART)</p>
<p>sleep(200)</p>
<p><strong>if</strong> microphone.current_event() ==
SoundEvent.QUIET:</p>
<p>display.show(Image.HEART_SMALL)</p></td>
<td><p>If the microphone detects the sound,</p>
<p>LED dot matrix displays <mark>❤</mark></p>
<p>Delay in 200ms</p>
<p>If it detects the outside world is quiet,</p>
<p>LED dot matrix displays![](media/04fdfc9060943954e7938bb1a741d626.png)</p></td>
</tr>
<tr class="even">
<td>print("Light intensity:", Lightintensity)</td>
<td>BBC microbit REPL window prints the value of the light brightnes etected by the light sensor</td>
</tr>
<tr class="odd">
<td>maxSound = 0</td>
<td>maxSound has an initial value of 0</td>
</tr>
<tr class="even">
<td>lights = Image("11111:""11111:""11111:""11111:""11111")</td>
<td>Set Image() to variable lights</td>
</tr>
<tr class="odd">
<td>soundLevel = microphone.sound_level()</td>
<td>Set microphone.sound_level() to variable soundLevel</td>
</tr>
<tr class="even">
<td><p><strong>if</strong> button_a.is_pressed():</p>
<p>display.scroll(maxSound)</p>
<p><strong>else:</strong></p>
<p>soundLevel = microphone.sound_level()</p>
<p>display.show(lights * soundLevel)</p></td>
<td><p>If button A is pressed, LED dot matrix displays the value of th ound level.</p>
<p>Otherwise,</p>
<p>Set microphone.sound_level() to variable soundLevel</p>
<p>The 25 LEDs are like breathing lights as the sound leve hanges</p></td>
</tr>
</tbody>
</table>





## Project 12: Bluetooth Wireles ommunication

1. Description

Although the micro:bit enjoys a low-power Bluetooth module that can mak luetooth connections and send data, it only boasts 16k RAM. The BL tack takes up 12k RAM, which means there is not enough space to ru icroPython, thus only one microPython or Bluetooth service can b unning at a time.

<https://microbit-micropython.readthedocs.io/en/latest/ble.html>

The above projects uses the built-in modules of micro: bit and LED do atrix, however, the following are all extended experiments between th ensor modules on the micro:bit and smart car such as an IR remot ontrol (microPython is not currently supported), an ultrasonic,  ervo, WS2812 RGB lights and seven-color lights.

（Note：Disconnect the USB cable from the micro:bi nd turn off the power on the bottom board (flip the POWER switch to th FF end) before installing the micro:bit on the expansion board so as t revent burning out the micro:bit board. Similarly, do the same befor emoving the micro: bit from the expansion board.)





